ARM GAS  /tmp/ccXfr2z9.s 			page 1


   1              	# 1 "../os/ports/GCC/ARM/crt0.s"
   1              	/*
   0              	
   0              	
   2              	    ChibiOS/RT - Copyright (C) 2006,2007,2008,2009,2010,
   3              	                 2011,2012 Giovanni Di Sirio.
   4              	
   5              	    This file is part of ChibiOS/RT.
   6              	
   7              	    ChibiOS/RT is free software; you can redistribute it and/or modify
   8              	    it under the terms of the GNU General Public License as published by
   9              	    the Free Software Foundation; either version 3 of the License, or
  10              	    (at your option) any later version.
  11              	
  12              	    ChibiOS/RT is distributed in the hope that it will be useful,
  13              	    but WITHOUT ANY WARRANTY; without even the implied warranty of
  14              	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15              	    GNU General Public License for more details.
  16              	
  17              	    You should have received a copy of the GNU General Public License
  18              	    along with this program.  If not, see <http://www.gnu.org/licenses/>.
  19              	*/
  20              	
  21              	/**
  22              	 * @file    ARM/crt0.s
  23              	 * @brief   Generic ARM7/9 startup file for ChibiOS/RT.
  24              	 *
  25              	 * @addtogroup ARM_CORE
  26              	 * @{
  27              	 */
  28              	
  29              	#if !defined(__DOXYGEN__)
  30              	
  31              	        .set    MODE_USR, 0x10
  32              	        .set    MODE_FIQ, 0x11
  33              	        .set    MODE_IRQ, 0x12
  34              	        .set    MODE_SVC, 0x13
  35              	        .set    MODE_ABT, 0x17
  36              	        .set    MODE_UND, 0x1B
  37              	        .set    MODE_SYS, 0x1F
  38              	
  39              	        .set    I_BIT, 0x80
  40              	        .set    F_BIT, 0x40
  41              	
  42              	        .text
  43              	        .code   32
  44              	        .balign 4
  45              	
  46              	/*
  47              	 * Reset handler.
  48              	 */
  49              	        .global ResetHandler
  50              	ResetHandler:
  51              	        /*
  52              	         * Stack pointers initialization.
  53              	         */
  54 0000 80009FE5 	        ldr     r0, =__ram_end__
ARM GAS  /tmp/ccXfr2z9.s 			page 2


  55              	        /* Undefined */
  56 0004 DBF021E3 	        msr     CPSR_c, #MODE_UND | I_BIT | F_BIT
  57 0008 00D0A0E1 	        mov     sp, r0
  58 000c 78109FE5 	        ldr     r1, =__und_stack_size__
  59 0010 010040E0 	        sub     r0, r0, r1
  60              	        /* Abort */
  61 0014 D7F021E3 	        msr     CPSR_c, #MODE_ABT | I_BIT | F_BIT
  62 0018 00D0A0E1 	        mov     sp, r0
  63 001c 6C109FE5 	        ldr     r1, =__abt_stack_size__
  64 0020 010040E0 	        sub     r0, r0, r1
  65              	        /* FIQ */
  66 0024 D1F021E3 	        msr     CPSR_c, #MODE_FIQ | I_BIT | F_BIT
  67 0028 00D0A0E1 	        mov     sp, r0
  68 002c 60109FE5 	        ldr     r1, =__fiq_stack_size__
  69 0030 010040E0 	        sub     r0, r0, r1
  70              	        /* IRQ */
  71 0034 D2F021E3 	        msr     CPSR_c, #MODE_IRQ | I_BIT | F_BIT
  72 0038 00D0A0E1 	        mov     sp, r0
  73 003c 54109FE5 	        ldr     r1, =__irq_stack_size__
  74 0040 010040E0 	        sub     r0, r0, r1
  75              	        /* Supervisor */
  76 0044 D3F021E3 	        msr     CPSR_c, #MODE_SVC | I_BIT | F_BIT
  77 0048 00D0A0E1 	        mov     sp, r0
  78 004c 48109FE5 	        ldr     r1, =__svc_stack_size__
  79 0050 010040E0 	        sub     r0, r0, r1
  80              	        /* System */
  81 0054 DFF021E3 	        msr     CPSR_c, #MODE_SYS | I_BIT | F_BIT
  82 0058 00D0A0E1 	        mov     sp, r0
  83              	//        ldr     r1, =__sys_stack_size__
  84              	//        sub     r0, r0, r1
  85              	        /*
  86              	         * Early initialization.
  87              	         */
  88              	#ifndef THUMB_NO_INTERWORKING
  89 005c FEFFFFEB 	        bl      __early_init
  90              	#else
  91              	        add     r0, pc, #1
  92              	        bx      r0
  93              	        .code   16
  94              	        bl      __early_init
  95              	        mov     r0, pc
  96              	        bx      r0
  97              	        .code   32
  98              	#endif
  99              	        /*
 100              	         * Data initialization.
 101              	         * NOTE: It assumes that the DATA size is a multiple of 4.
 102              	         */
 103              	//        ldr     r1, =_textdata
 104              	//        ldr     r2, =_data
 105              	//        ldr     r3, =_edata
 106              	//dataloop:
 107              	//        cmp     r2, r3
 108              	//       ldrlo   r0, [r1], #4
 109              	//        strlo   r0, [r2], #4
 110              	//        blo     dataloop
 111              	        /*
ARM GAS  /tmp/ccXfr2z9.s 			page 3


 112              	         * BSS initialization.
 113              	         * NOTE: It assumes that the BSS size is a multiple of 4.
 114              	         */
 115 0060 0000A0E3 	        mov     r0, #0
 116 0064 34109FE5 	        ldr     r1, =_bss_start
 117 0068 34209FE5 	        ldr     r2, =_bss_end
 118              	bssloop:
 119 006c 020051E1 	        cmp     r1, r2
 120 0070 04008134 	        strlo   r0, [r1], #4
 121 0074 FCFFFF3A 	        blo     bssloop
 122              	        /*
 123              	         * Main program invocation.
 124              	         */
 125              	#ifdef THUMB_NO_INTERWORKING
 126              	        add     r0, pc, #1
 127              	        bx      r0
 128              	        .code   16
 129              	        bl      main
 130              	        ldr     r1, =_main_exit_handler
 131              	        bx      r1
 132              	        .code   32
 133              	#else
 134 0078 FEFFFFEB 	        bl      main
 135 007c FEFFFFEA 	        b       _main_exit_handler
 136              	#endif
 137              	
 138              	/*
 139              	 * Default main function exit handler.
 140              	 */
 141              	        .weak   _main_exit_handler
 142              	        .global _main_exit_handler
 143              	_main_exit_handler:
 144 0080 FEFFFFEA 	.loop:  b       .loop
 145              	
 146              	/*
 147              	 * Default early initialization code. It is declared weak in order to be
 148              	 * replaced by the real initialization code.
 149              	 * Early initialization is performed just after reset before BSS and DATA
 150              	 * segments initialization.
 151              	 */
 152              	#ifdef THUMB_NO_INTERWORKING
 153              	        .thumb_func
 154              	        .code   16
 155              	#endif
 156              	        .weak   __early_init
 157              	hwinit0:
 158 0084 1EFF2FE1 	        bx      lr
 159 0088 00000000 	        .code   32
 159      00000000 
 159      00000000 
 159      00000000 
 159      00000000 
ARM GAS  /tmp/ccXfr2z9.s 			page 4


DEFINED SYMBOLS
../os/ports/GCC/ARM/crt0.s:31     *ABS*:0000000000000010 MODE_USR
../os/ports/GCC/ARM/crt0.s:32     *ABS*:0000000000000011 MODE_FIQ
../os/ports/GCC/ARM/crt0.s:33     *ABS*:0000000000000012 MODE_IRQ
../os/ports/GCC/ARM/crt0.s:34     *ABS*:0000000000000013 MODE_SVC
../os/ports/GCC/ARM/crt0.s:35     *ABS*:0000000000000017 MODE_ABT
../os/ports/GCC/ARM/crt0.s:36     *ABS*:000000000000001b MODE_UND
../os/ports/GCC/ARM/crt0.s:37     *ABS*:000000000000001f MODE_SYS
../os/ports/GCC/ARM/crt0.s:39     *ABS*:0000000000000080 I_BIT
../os/ports/GCC/ARM/crt0.s:40     *ABS*:0000000000000040 F_BIT
../os/ports/GCC/ARM/crt0.s:44     .text:0000000000000000 $a
../os/ports/GCC/ARM/crt0.s:50     .text:0000000000000000 ResetHandler
../os/ports/GCC/ARM/crt0.s:118    .text:000000000000006c bssloop
../os/ports/GCC/ARM/crt0.s:143    .text:0000000000000080 _main_exit_handler
../os/ports/GCC/ARM/crt0.s:144    .text:0000000000000080 .loop
../os/ports/GCC/ARM/crt0.s:157    .text:0000000000000084 hwinit0
../os/ports/GCC/ARM/crt0.s:159    .text:0000000000000088 $d

UNDEFINED SYMBOLS
__ram_end__
__und_stack_size__
__abt_stack_size__
__fiq_stack_size__
__irq_stack_size__
__svc_stack_size__
__early_init
_bss_start
_bss_end
main
