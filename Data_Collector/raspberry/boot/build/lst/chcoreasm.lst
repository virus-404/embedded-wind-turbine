ARM GAS  /tmp/cc0GnLrp.s 			page 1


   1              	# 1 "../os/ports/GCC/ARM/chcoreasm.s"
   1              	/*
   0              	
   0              	
   2              	    ChibiOS/RT - Copyright (C) 2006,2007,2008,2009,2010,
   3              	                 2011,2012 Giovanni Di Sirio.
   4              	
   5              	    This file is part of ChibiOS/RT.
   6              	
   7              	    ChibiOS/RT is free software; you can redistribute it and/or modify
   8              	    it under the terms of the GNU General Public License as published by
   9              	    the Free Software Foundation; either version 3 of the License, or
  10              	    (at your option) any later version.
  11              	
  12              	    ChibiOS/RT is distributed in the hope that it will be useful,
  13              	    but WITHOUT ANY WARRANTY; without even the implied warranty of
  14              	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15              	    GNU General Public License for more details.
  16              	
  17              	    You should have received a copy of the GNU General Public License
  18              	    along with this program.  If not, see <http://www.gnu.org/licenses/>.
  19              	*/
  20              	
  21              	/**
  22              	 * @file    ARM/chcoreasm.s
  23              	 * @brief   ARM7/9 architecture port low level code.
  24              	 *
  25              	 * @addtogroup ARM_CORE
  26              	 * @{
  27              	 */
  28              	
  29              	#include "chconf.h"
   1              	/*
  30              	
  31              	#define FALSE 0
  32              	#define TRUE 1
  33              	
  34              	#if !defined(__DOXYGEN__)
  35              	
  36              	.set    MODE_USR, 0x10
  37              	.set    MODE_FIQ, 0x11
  38              	.set    MODE_IRQ, 0x12
  39              	.set    MODE_SVC, 0x13
  40              	.set    MODE_ABT, 0x17
  41              	.set    MODE_UND, 0x1B
  42              	.set    MODE_SYS, 0x1F
  43              	
  44              	.equ    I_BIT, 0x80
  45              	.equ    F_BIT, 0x40
  46              	
  47              	.text
  48              	
  49              	/*
  50              	 * Interrupt enable/disable functions, only present if there is THUMB code in
  51              	 * the system because those are inlined in ARM code.
  52              	 */
  53              	#ifdef THUMB_PRESENT
ARM GAS  /tmp/cc0GnLrp.s 			page 2


  54              	.balign 16
  55              	.code 16
  56              	.thumb_func
  57              	.global _port_disable_thumb
  58              	_port_disable_thumb:
  59              	        mov     r3, pc
  60              	        bx      r3
  61              	.code 32
  62              	        mrs     r3, CPSR
  63              	        orr     r3, #I_BIT
  64              	        msr     CPSR_c, r3
  65              	        orr     r3, #F_BIT
  66              	        msr     CPSR_c, r3
  67              	        bx      lr
  68              	
  69              	.balign 16
  70              	.code 16
  71              	.thumb_func
  72              	.global _port_suspend_thumb
  73              	_port_suspend_thumb:
  74              	.thumb_func
  75              	.global _port_lock_thumb
  76              	_port_lock_thumb:
  77              	        mov     r3, pc
  78              	        bx      r3
  79              	.code 32
  80              	        msr     CPSR_c, #MODE_SYS | I_BIT
  81              	        bx      lr
  82              	
  83              	.balign 16
  84              	.code 16
  85              	.thumb_func
  86              	.global _port_enable_thumb
  87              	_port_enable_thumb:
  88              	.thumb_func
  89              	.global _port_unlock_thumb
  90              	_port_unlock_thumb:
  91              	        mov     r3, pc
  92              	        bx      r3
  93              	.code 32
  94              	        msr     CPSR_c, #MODE_SYS
  95              	        bx      lr
  96              	
  97              	#endif
  98              	
  99              	.balign 16
 100              	#ifdef THUMB_PRESENT
 101              	.code 16
 102              	.thumb_func
 103              	.global _port_switch_thumb
 104              	_port_switch_thumb:
 105              	        mov     r2, pc
 106              	        bx      r2
 107              	        // Jumps into _port_switch_arm in ARM mode
 108              	#endif
 109              	.code 32
 110              	.global _port_switch_arm
ARM GAS  /tmp/cc0GnLrp.s 			page 3


 111              	_port_switch_arm:
 112              	#ifdef CH_CURRP_REGISTER_CACHE
 113              	        stmfd   sp!, {r4, r5, r6, r8, r9, r10, r11, lr}
 114              	        str     sp, [r1, #12]
 115              	        ldr     sp, [r0, #12]
 116              	#ifdef THUMB_PRESENT
 117              	        ldmfd   sp!, {r4, r5, r6, r8, r9, r10, r11, lr}
 118              	        bx      lr
 119              	#else /* !THUMB_PRESENT */
 120              	        ldmfd   sp!, {r4, r5, r6, r8, r9, r10, r11, pc}
 121              	#endif /* !THUMB_PRESENT */
 122              	#else /* !CH_CURRP_REGISTER_CACHE */
 123 0000 F04F2DE9 	        stmfd   sp!, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 124 0004 0CD081E5 	        str     sp, [r1, #12]
 125 0008 0CD090E5 	        ldr     sp, [r0, #12]
 126              	#ifdef THUMB_PRESENT
 127              	        ldmfd   sp!, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 128              	        bx      lr
 129              	#else /* !THUMB_PRESENT */
 130 000c F08FBDE8 	        ldmfd   sp!, {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 131              	#endif /* !THUMB_PRESENT */
 132              	#endif /* !CH_CURRP_REGISTER_CACHE */
 133              	
 134              	/*
 135              	 * Common exit point for all IRQ routines, it performs the rescheduling if
 136              	 * required.
 137              	 * System stack frame structure after a context switch in the
 138              	 * interrupt handler:
 139              	 *
 140              	 * High +------------+
 141              	 *      |   LR_USR   | -+
 142              	 *      |     R12    |  |
 143              	 *      |     R3     |  |
 144              	 *      |     R2     |  | External context: IRQ handler frame
 145              	 *      |     R1     |  |
 146              	 *      |     R0     |  |
 147              	 *      |     PC     |  |   (user code return address)
 148              	 *      |   PSR_USR  | -+   (user code status)
 149              	 *      |    ....    | <- chSchDoReschedule() stack frame, optimize it for space
 150              	 *      |     LR     | -+   (system code return address)
 151              	 *      |     R11    |  |
 152              	 *      |     R10    |  |
 153              	 *      |     R9     |  |
 154              	 *      |     R8     |  | Internal context: chSysSwitch() frame
 155              	 *      |    (R7)    |  |   (optional, see CH_CURRP_REGISTER_CACHE)
 156              	 *      |     R6     |  |
 157              	 *      |     R5     |  |
 158              	 * SP-> |     R4     | -+
 159              	 * Low  +------------+
 160              	 */
 161              	.balign 16
 162              	#ifdef THUMB_NO_INTERWORKING
 163              	.code 16
 164              	.thumb_func
 165              	.globl _port_irq_common
 166              	_port_irq_common:
 167              	        bl      chSchIsPreemptionRequired
ARM GAS  /tmp/cc0GnLrp.s 			page 4


 168              	        mov     lr, pc
 169              	        bx      lr
 170              	.code 32
 171              	#else /* !THUMB_NO_INTERWORKING */
 172              	.code 32
 173              	.globl _port_irq_common
 174              	_port_irq_common:
 175 0010 FEFFFFEB 	        bl      chSchIsPreemptionRequired
 176              	#endif /* !THUMB_NO_INTERWORKING */
 177 0014 000050E3 	        cmp     r0, #0                          // Simply returns if a
 178 0018 0F50BD08 	        ldmeqfd sp!, {r0-r3, r12, lr}           // reschedule is not
 179 001c 04F05E02 	        subeqs  pc, lr, #4                      // required.
 180              	
 181              	        // Saves the IRQ mode registers in the system stack.
 182 0020 0F50BDE8 	        ldmfd   sp!, {r0-r3, r12, lr}           // IRQ stack now empty.
 183 0024 9FF021E3 	        msr     CPSR_c, #MODE_SYS | I_BIT
 184 0028 0F502DE9 	        stmfd   sp!, {r0-r3, r12, lr}           // Registers on System Stack.
 185 002c 92F021E3 	        msr     CPSR_c, #MODE_IRQ | I_BIT
 186 0030 00004FE1 	        mrs     r0, SPSR
 187 0034 0E10A0E1 	        mov     r1, lr
 188 0038 9FF021E3 	        msr     CPSR_c, #MODE_SYS | I_BIT
 189 003c 03002DE9 	        stmfd   sp!, {r0, r1}                   // Push R0=SPSR, R1=LR_IRQ.
 190              	
 191              	        // Context switch.
 192              	#ifdef THUMB_NO_INTERWORKING
 193              	        add     r0, pc, #1
 194              	        bx      r0
 195              	.code 16
 196              	#if CH_DBG_SYSTEM_STATE_CHECK
 197              	        bl      dbg_check_lock
 198              	#endif
 199              	        bl      chSchDoReschedule
 200              	#if CH_DBG_SYSTEM_STATE_CHECK
 201              	        bl      dbg_check_unlock
 202              	#endif
 203              	        mov     lr, pc
 204              	        bx      lr
 205              	.code 32
 206              	#else /* !THUMB_NO_INTERWORKING */
 207              	#if CH_DBG_SYSTEM_STATE_CHECK
 208              	        bl      dbg_check_lock
 209              	#endif
 210 0040 FEFFFFEB 	        bl      chSchDoReschedule
 211              	#if CH_DBG_SYSTEM_STATE_CHECK
 212              	        bl      dbg_check_unlock
 213              	#endif
 214              	#endif /* !THUMB_NO_INTERWORKING */
 215              	
 216              	        // Re-establish the IRQ conditions again.
 217 0044 0300BDE8 	        ldmfd   sp!, {r0, r1}                   // Pop R0=SPSR, R1=LR_IRQ.
 218 0048 92F021E3 	        msr     CPSR_c, #MODE_IRQ | I_BIT
 219 004c 00F06FE1 	        msr     SPSR_fsxc, r0
 220 0050 01E0A0E1 	        mov     lr, r1
 221 0054 9FF021E3 	        msr     CPSR_c, #MODE_SYS | I_BIT
 222 0058 0F50BDE8 	        ldmfd   sp!, {r0-r3, r12, lr}
 223 005c 92F021E3 	        msr     CPSR_c, #MODE_IRQ | I_BIT
 224 0060 04F05EE2 	        subs    pc, lr, #4
ARM GAS  /tmp/cc0GnLrp.s 			page 5


 225              	
 226              	/*
 227              	 * Threads trampoline code.
 228              	 * NOTE: The threads always start in ARM mode and then switches to the
 229              	 * thread-function mode.
 230              	 */
 231 0064 00F020E3 	.balign 16
 231      00F020E3 
 231      00F020E3 
 232              	.code 32
 233              	.globl _port_thread_start
 234              	_port_thread_start:
 235              	#if CH_DBG_SYSTEM_STATE_CHECK
 236              	        mov     r0, #0
 237              	        ldr     r1, =dbg_lock_cnt
 238              	        str     r0, [r1]
 239              	#endif
 240 0070 1FF021E3 	        msr     CPSR_c, #MODE_SYS
 241              	#ifndef THUMB_NO_INTERWORKING
 242 0074 0500A0E1 	        mov     r0, r5
 243 0078 0FE0A0E1 	        mov     lr, pc
 244 007c 14FF2FE1 	        bx      r4
 245 0080 FEFFFFEB 	        bl      chThdExit
ARM GAS  /tmp/cc0GnLrp.s 			page 6


DEFINED SYMBOLS
../os/ports/GCC/ARM/chcoreasm.s:36     *ABS*:0000000000000010 MODE_USR
../os/ports/GCC/ARM/chcoreasm.s:37     *ABS*:0000000000000011 MODE_FIQ
../os/ports/GCC/ARM/chcoreasm.s:38     *ABS*:0000000000000012 MODE_IRQ
../os/ports/GCC/ARM/chcoreasm.s:39     *ABS*:0000000000000013 MODE_SVC
../os/ports/GCC/ARM/chcoreasm.s:40     *ABS*:0000000000000017 MODE_ABT
../os/ports/GCC/ARM/chcoreasm.s:41     *ABS*:000000000000001b MODE_UND
../os/ports/GCC/ARM/chcoreasm.s:42     *ABS*:000000000000001f MODE_SYS
../os/ports/GCC/ARM/chcoreasm.s:44     *ABS*:0000000000000080 I_BIT
../os/ports/GCC/ARM/chcoreasm.s:45     *ABS*:0000000000000040 F_BIT
../os/ports/GCC/ARM/chcoreasm.s:99     .text:0000000000000000 $a
../os/ports/GCC/ARM/chcoreasm.s:111    .text:0000000000000000 _port_switch_arm
../os/ports/GCC/ARM/chcoreasm.s:174    .text:0000000000000010 _port_irq_common
../os/ports/GCC/ARM/chcoreasm.s:234    .text:0000000000000070 _port_thread_start

UNDEFINED SYMBOLS
chSchIsPreemptionRequired
chSchDoReschedule
chThdExit
